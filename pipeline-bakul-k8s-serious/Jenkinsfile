pipeline {
    agent any

    environment {
        HARBOR_REGISTRY = 'bakul.mod.gov.my'  // Harbor registry URL
        PATH_YAML = "deploy-dev/deploy_bakul.yaml"
        NAMES_SPACE = "dev-app-awam"  // Namespace for deployment in k8s
        KUBECONFIG = "/home/jenkins/agent/k8s-dev/k8s-dev.yaml"  // Path to your KUBECONFIG certs
        DOCKERFILE_LOCATION = './Dockerfile'    // Dockerfile in root location
        GIT_URL = "https://github.com/amundead/test-repo.git"  // GitHub repository URL
    }

    parameters {
        choice(name: 'BUILD_OPTION', choices: ['Build (Same Tag Rollout)', 'Build (Set New Tag)', 'Skip Build'], description: 'Choose the build option')
        string(name: 'FULL_IMAGE_NAME', defaultValue: '', description: 'Enter the full image name (including tag) for the build or for skipping build (e.g., bakul.mod.gov.my/testing-app/node-helloworld:v1.01)')
    }

    stages {
        stage('Extract Image Name') {
            steps {
                script {
                    // Extract the image name (without registry and tag)
                    def imageNameToDeploy = params.FULL_IMAGE_NAME.tokenize('/').last().split(':')[0]
                    echo "Extracted image name for deployment: ${imageNameToDeploy}"
                    env.NAME_DEPLOY = imageNameToDeploy
                }
            }
        }

        stage('Input Decision') {
            steps {
                script {
                    if (params.BUILD_OPTION == 'Skip Build') {
                        echo "Skipping build. The provided image will be deployed: ${params.FULL_IMAGE_NAME}"
                    } else {
                        echo "You have chosen to build the image."
                    }
                }
            }
        }

        stage('Clone Repository') {
            when {
                expression { params.BUILD_OPTION != 'Skip Build' }
            }
            steps {
                git branch: 'main', url: "${GIT_URL}"  // Clone your GitHub repo
            }
        }

        stage('Check Dockerfile Location') {
            when {
                expression { params.BUILD_OPTION != 'Skip Build' }
            }
            steps {
                script {
                    if (fileExists(DOCKERFILE_LOCATION)) {
                        echo "Dockerfile found at ${DOCKERFILE_LOCATION}"
                    } else {
                        error "Dockerfile not found at ${DOCKERFILE_LOCATION}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            when {
                expression { params.BUILD_OPTION != 'Skip Build' }
            }
            steps {
                script {
                    def imageNameToBuild = params.FULL_IMAGE_NAME.trim()
                    docker.build("${imageNameToBuild}", "--no-cache -f ${DOCKERFILE_LOCATION} .")
                }
            }
        }

        stage('Tag and Push Docker Image to Harbor') {
            when {
                expression { params.BUILD_OPTION != 'Skip Build' }
            }
            steps {
                script {
                    def imageNameToPush = params.FULL_IMAGE_NAME.trim()
                    docker.withRegistry("https://${HARBOR_REGISTRY}", 'harbor-credentials-amir') {
                        docker.image("${imageNameToPush}").push()
                    }
                }
            }
        }

        stage('Update Deployment YAML') {
            when {
                expression { params.BUILD_OPTION == 'Build (Set New Tag)' }
            }
            steps {
                script {
                    def newImageName = params.FULL_IMAGE_NAME.trim()
                    sh "sed -i 's|{{DOCKER_IMAGE}}|${newImageName}|g' ${PATH_YAML}"
                    sh "sed -i 's|{{NAME_DEPLOY}}|${env.NAME_DEPLOY}|g' ${PATH_YAML}"
                    sh "sed -i 's|{{NAMES_SPACE}}|${NAMES_SPACE}|g' ${PATH_YAML}"
                }
            }
        }

        stage('Deploy Image to Kubernetes') {
            steps {
                script {
                    def imageNameToDeploy = params.FULL_IMAGE_NAME.trim()

                    if (params.BUILD_OPTION == 'Skip Build' && imageNameToDeploy == '') {
                        error "No image provided for deployment. Please specify an image in the FULL_IMAGE_NAME parameter."
                    }

                    // Check if the deployment already exists
                    echo "Checking if deployment '$env.NAME_DEPLOY' exists in the namespace '$NAMES_SPACE'..."
                    def deploymentExists = sh(script: "kubectl --kubeconfig=$KUBECONFIG get deployment $env.NAME_DEPLOY --namespace=$NAMES_SPACE", returnStatus: true) == 0

                    if (deploymentExists) {
                        def currentImage = sh(script: "kubectl --kubeconfig=$KUBECONFIG get deployment $env.NAME_DEPLOY --namespace=$NAMES_SPACE -o jsonpath='{.spec.template.spec.containers[0].image}'", returnStdout: true).trim()

                        if (params.BUILD_OPTION == 'Build (Same Tag Rollout)') {
                            // Check if the provided image tag is different from the current image tag
                            if (currentImage != imageNameToDeploy) {
                                echo "Different image tag provided. Updating the deployment..."
                                sh """
                                    CONTAINER_NAME=\$(kubectl --kubeconfig=$KUBECONFIG get deployment $env.NAME_DEPLOY --namespace=$NAMES_SPACE -o jsonpath='{.spec.template.spec.containers[0].name}')
                                    kubectl --kubeconfig=$KUBECONFIG set image deployment/$env.NAME_DEPLOY \${CONTAINER_NAME}=$imageNameToDeploy --namespace=$NAMES_SPACE
                                """
                            } else {
                                echo "Using the same image tag as the current deployment. Performing rollout restart..."
                                sh "kubectl --kubeconfig=$KUBECONFIG rollout restart deployment/$env.NAME_DEPLOY --namespace=$NAMES_SPACE"
                            }
                        } else if (params.BUILD_OPTION == 'Build (Set New Tag)') {
                            echo "New image tag detected: $imageNameToDeploy."
                            // Check if the provided image tag is the same as the current one
                            if (currentImage == imageNameToDeploy) {
                                echo "Same image tag as current deployment. Performing rollout restart..."
                                sh "kubectl --kubeconfig=$KUBECONFIG rollout restart deployment/$env.NAME_DEPLOY --namespace=$NAMES_SPACE"
                            } else {
                                echo "Updating the deployment with the new image tag..."
                                sh """
                                    CONTAINER_NAME=\$(kubectl --kubeconfig=$KUBECONFIG get deployment $env.NAME_DEPLOY --namespace=$NAMES_SPACE -o jsonpath='{.spec.template.spec.containers[0].name}')
                                    kubectl --kubeconfig=$KUBECONFIG set image deployment/$env.NAME_DEPLOY \${CONTAINER_NAME}=$imageNameToDeploy --namespace=$NAMES_SPACE
                                """
                            }
                        } else if (params.BUILD_OPTION == 'Skip Build') {
                            // Handle case where user skips build and uses the same image name with an old tag
                            if (currentImage != imageNameToDeploy) {
                                echo "Using a different image tag. Updating the deployment..."
                                sh """
                                    CONTAINER_NAME=\$(kubectl --kubeconfig=$KUBECONFIG get deployment $env.NAME_DEPLOY --namespace=$NAMES_SPACE -o jsonpath='{.spec.template.spec.containers[0].name}')
                                    kubectl --kubeconfig=$KUBECONFIG set image deployment/$env.NAME_DEPLOY \${CONTAINER_NAME}=$imageNameToDeploy --namespace=$NAMES_SPACE
                                """
                            } else {
                                echo "Using the same image tag as the current deployment. Performing rollout restart..."
                                sh "kubectl --kubeconfig=$KUBECONFIG rollout restart deployment/$env.NAME_DEPLOY --namespace=$NAMES_SPACE"
                            }
                        }
                    } else {
                        // No deployment exists, apply YAML even in Skip Build case
                        echo "Deployment does not exist. Updating YAML and applying it..."
                        
                        // Update YAML with the image to deploy
                        sh "sed -i 's|{{DOCKER_IMAGE}}|${imageNameToDeploy}|g' ${PATH_YAML}"
                        sh "sed -i 's|{{NAME_DEPLOY}}|$env.NAME_DEPLOY|g' ${PATH_YAML}"
                        sh "sed -i 's|{{NAMES_SPACE}}|$NAMES_SPACE|g' ${PATH_YAML}"

                        // Apply YAML
                        sh "kubectl --kubeconfig=$KUBECONFIG apply -f ${PATH_YAML} --namespace=$NAMES_SPACE"
                    }
                }
            }
        }

        stage('Show Deployment Services') {
            steps {
                sh "kubectl --kubeconfig=$KUBECONFIG get svc -n $NAMES_SPACE $env.NAME_DEPLOY-loadbalancer"  // Get the LoadBalancer IP of service.
            }
        }
    }         
    post {
        success {
            echo 'Deployment to Kubernetes was successful.'
        }
        failure {
            echo 'Deployment to Kubernetes failed.'
        }
    }
}
