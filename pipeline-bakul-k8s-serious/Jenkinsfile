pipeline {
    agent any

    environment {
        HARBOR_REGISTRY = 'bakul.mod.gov.my'  // Harbor registry URL
        HARBOR_PROJECT = 'testing-app/node-helloworld'  // Harbor project
        DEFAULT_IMAGE_TAG = 'v1.01'  // Default image tag to use if user input is skipped
        NAME_DEPLOY = 'node-helloworld'
        PATH_YAML = "deploy-dev/deploy_bakul.yaml"
        NAMES_SPACE = "dev-app-awam"  // Namespace for deployment in k8s
        KUBECONFIG = "/home/jenkins/agent/k8s-dev/k8s-dev.yaml"  // Path to your KUBECONFIG certs
        DOCKERFILE_LOCATION = './tot/lab-01/Dockerfile'  // Dockerfile location
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: "https://github.com/amundead/test-repo.git"  // Clone your GitHub repo
            }
        }

        stage('Get User Input for Image Tag') {
            steps {
                script {
                    // Prompt user for the image tag (if they want to change the default)
                    def userInput = input(
                        id: 'UserInput', message: 'Deploy with custom image tag?', parameters: [
                            string(defaultValue: DEFAULT_IMAGE_TAG, description: 'Enter the new image tag', name: 'IMAGE_TAG')
                        ]
                    )

                    // Construct the full image name with user input
                    env.IMAGE_NAME_HARBOR = "${HARBOR_REGISTRY}/${HARBOR_PROJECT}:${userInput}"
                    echo "User selected image: ${env.IMAGE_NAME_HARBOR}"
                }
            }
        }

        stage('Build or Use Existing Image') {
            steps {
                script {
                    def userChoice = input(
                        id: 'BuildOrDeploy', message: 'Choose an action', parameters: [
                            choice(choices: ['Build new image', 'Deploy existing image'], description: 'Build new Docker image or use an existing one?', name: 'ACTION')
                        ]
                    )

                    if (userChoice == 'Build new image') {
                        echo "Building and pushing new Docker image..."
                        docker.build("${env.IMAGE_NAME_HARBOR}", "--no-cache -f ${DOCKERFILE_LOCATION} .")
                        docker.withRegistry("https://${HARBOR_REGISTRY}", 'harbor-credentials-amir') {
                            docker.image("${env.IMAGE_NAME_HARBOR}").push()
                        }
                    } else {
                        echo "Skipping build. Using existing image: ${env.IMAGE_NAME_HARBOR}"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Check if deployment exists
                    def deploymentExists = sh(script: "kubectl --kubeconfig=$KUBECONFIG get deployment $NAME_DEPLOY --namespace=$NAMES_SPACE", returnStatus: true) == 0

                    if (deploymentExists) {
                        // Check current image and perform actions based on the image tag
                        def currentImage = sh(script: "kubectl --kubeconfig=$KUBECONFIG get deployment $NAME_DEPLOY --namespace=$NAMES_SPACE -o jsonpath='{.spec.template.spec.containers[0].image}'", returnStdout: true).trim()

                        if (currentImage != "${env.IMAGE_NAME_HARBOR}") {
                            echo "New image detected: ${env.IMAGE_NAME_HARBOR}. Updating deployment..."
                            sh """
                                CONTAINER_NAME=\$(kubectl --kubeconfig=$KUBECONFIG get deployment $NAME_DEPLOY --namespace=$NAMES_SPACE -o jsonpath='{.spec.template.spec.containers[0].name}')
                                kubectl --kubeconfig=$KUBECONFIG set image deployment/$NAME_DEPLOY \${CONTAINER_NAME}=$IMAGE_NAME_HARBOR --namespace=$NAMES_SPACE
                            """
                        } else {
                            echo "Same image detected. No update required."
                        }
                    } else {
                        echo "Deployment does not exist. Applying deployment YAML..."
                        sh "kubectl --kubeconfig=$KUBECONFIG apply -f ${PATH_YAML} --namespace=$NAMES_SPACE"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment to Kubernetes cluster successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
