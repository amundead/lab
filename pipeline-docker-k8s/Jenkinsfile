pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "amundead/nginx-hello-world:v1.10"   // Docker image with tag
        KUBECONFIG = "/home/jenkins/agent/k8s-dev/k8s-dev.yaml"  // Path to your KUBECONFIG
        NAMES_SPACE = "dev-app-awam"  // Namespace for deployment in k8s
        PATH_YAML = "deploy/deployment.yaml"
        NAME_DEPLOY = "hello-world"
        DOCKERFILE_LOCATION = './Dockerfile'    // Dockerfile in root location  './tot/lab-01/Dockerfile'

    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: "https://github.com/amundead/test-repo.git"  // Clone your GitHub repo
            }
        }

        stage('Check Dockerfile Location') {
            steps {
                script {
                    // Check if the Dockerfile exists in the root location
                    if (fileExists(DOCKERFILE_LOCATION)) {
                        echo "Dockerfile found at ${DOCKERFILE_LOCATION}"
                    } else {
                        error "Dockerfile not found at ${DOCKERFILE_LOCATION}"
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image using docker.build with --no-cache option
                    docker.build("${DOCKER_IMAGE}", "--no-cache -f ${DOCKERFILE_LOCATION} .")
                }
            }
        }
        
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR')]) {
                        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                        sh 'docker push $DOCKER_IMAGE'  // Push Docker image to Docker Hub
                    }
                }
            }
        }

        stage('Check Files') {
            steps {
                sh 'ls -R'  // List all files in the workspace to verify the structure
            }
        }

        stage('Update Deployment YAML') {
            steps {
                // Replace the placeholder with the actual Docker image name
                sh "sed -i 's|{{DOCKER_IMAGE}}|$DOCKER_IMAGE|g' ${PATH_YAML}"
                sh "sed -i 's|{{NAME_DEPLOY}}|$NAME_DEPLOY|g' ${PATH_YAML}"
                sh "sed -i 's|{{NAMES_SPACE}}|$NAMES_SPACE|g' ${PATH_YAML}"
            }
        }
      
        stage('Update or Restart Deployment in Kubernetes') {
            steps {
                script {
                    // Check if the deployment already exists
                    echo "Checking if deployment '$NAME_DEPLOY' exists in the namespace '$NAMES_SPACE'..."
                    def deploymentExists = sh(script: "kubectl --kubeconfig=$KUBECONFIG get deployment $NAME_DEPLOY --namespace=$NAMES_SPACE", returnStatus: true) == 0

                    if (deploymentExists) {
                        // Check the currently deployed image tag
                        echo "Deployment '$NAME_DEPLOY' exists in the namespace '$NAMES_SPACE'."
                        def currentImage = sh(script: "kubectl --kubeconfig=$KUBECONFIG get deployment $NAME_DEPLOY --namespace=$NAMES_SPACE -o jsonpath='{.spec.template.spec.containers[0].image}'", returnStdout: true).trim()

                        if (currentImage != "$IMAGE_NAME_HARBOR") {
                            // Automatically get the container name and set the image
                            echo "New image detected: $IMAGE_NAME_HARBOR. Updating the deployment..."
                            sh """
                                CONTAINER_NAME=\$(kubectl --kubeconfig=$KUBECONFIG get deployment $NAME_DEPLOY --namespace=$NAMES_SPACE -o jsonpath='{.spec.template.spec.containers[0].name}')
                                kubectl --kubeconfig=$KUBECONFIG set image deployment/$NAME_DEPLOY \${CONTAINER_NAME}=$IMAGE_NAME_HARBOR --namespace=$NAMES_SPACE
                            """
                            echo "Deployment updated with new image: $IMAGE_NAME_HARBOR."
                        } else {
                            // If the image is the same, perform a rollout restart
                            echo "Same image detected. Performing rollout restart..."
                            sh "kubectl --kubeconfig=$KUBECONFIG rollout restart deployment/$NAME_DEPLOY --namespace=$NAMES_SPACE"
                            echo "Rollout restart triggered for deployment: $NAME_DEPLOY."
                        }
                    } else {
                        // If the deployment does not exist, apply the deployment YAML
                        echo "Deployment does not exist. Applying the deployment YAML..."
                        sh "kubectl --kubeconfig=$KUBECONFIG apply -f ${PATH_YAML} --namespace=$NAMES_SPACE"
                        echo "Deployment applied: $NAME_DEPLOY."
                    }
                }
            }
        }

        stage('Show Deployment Services') {
            steps {
                sh "kubectl --kubeconfig=$KUBECONFIG get svc -n $NAMES_SPACE $NAME_DEPLOY-loadbalancer"  // Get the LoadBalancer IP of service.
            }
        }
    }
    
    post {
        success {
            echo 'Deployment to Kubernetes cluster successful!'
        }
        failure {
            echo 'Deployment failed! haha'
        }
    }
}