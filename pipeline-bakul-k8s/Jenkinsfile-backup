//Jenkins scripts CI/CD customize by Amir@Mindef 2024 v2.00

pipeline {
    agent {
        label 'docker-jenkins-agent'  // Use the Docker template label
    }

    environment {
        HARBOR_REGISTRY = 'bakul.mod.gov.my'  // Harbor registry URL
        HARBOR_PROJECT = 'testing-app'  // Harbor project where image will be pushed
        HARBOR_IMAGE = 'node-helloworld'
        TAG = 'v1.01'  // Tag for the Docker image
        NAME_DEPLOY = 'node-helloworld'
        IMAGE_NAME_HARBOR = "${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${HARBOR_IMAGE}"  // Full image name for Harbor
        KUBECONFIG = "/home/jenkins/agent/k8s-dev/k3s.yaml"  // Path to your KUBECONFIG certs
        NAMES_SPACE = "dev-app-awam"  // Namespace for deployment in k8s
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: "https://github.com/amundead/test-repo.git"  // Clone your GitHub repo
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image using docker.build with --no-cache option
                    docker.build("${IMAGE_NAME_HARBOR}:${TAG}", "--no-cache .")
                }
            }
        }

        stage('Tag and Push Docker Image to Harbor') {
            steps {
                script {
                    // Use docker.withRegistry for secure login and push to Harbor
                    docker.withRegistry("https://${HARBOR_REGISTRY}", 'harbor-credentials-id') {
                        docker.image("${IMAGE_NAME_HARBOR}:${TAG}").push()
                    }
                }
            }
        }

        stage('Check Files') {
            steps {
                sh 'ls -R'  // List all files in the workspace to verify the structure
            }
        }

        stage('Update Deployment YAML') {
            steps {
                // Replace the placeholder with the actual Docker image name
                sh "sed -i 's|{{DOCKER_IMAGE}}|$IMAGE_NAME_HARBOR:$TAG|g' /home/jenkins/agent/workspace/CI-testing-hello-world/deploy-dev/deploy_bakul.yaml"
                sh "sed -i 's|{{NAME_DEPLOY}}|$NAME_DEPLOY|g' /home/jenkins/agent/workspace/CI-testing-hello-world/deploy-dev/deploy_bakul.yaml"
                sh "sed -i 's|{{NAMES_SPACE}}|$NAMES_SPACE|g' /home/jenkins/agent/workspace/CI-testing-hello-world/deploy-dev/deploy_bakul.yaml"
            }
        }

        stage('Deploy Application') {
            steps {
                sh "kubectl --kubeconfig=$KUBECONFIG apply -f /home/jenkins/agent/workspace/CI-testing-hello-world/deploy-dev/deploy_bakul.yaml"  // Apply deployment.yaml from the deploy folder
            }
        }
        
        stage('Update Image in Kubernetes') {
            steps {
                sh "kubectl --kubeconfig=$KUBECONFIG set image deployment/$NAME_DEPLOY $NAME_DEPLOY=$IMAGE_NAME_HARBOR:$TAG --namespace=$NAMES_SPACE"  // Update the  image in the Kubernetes deployment
            }
        }

        stage('Show Deployment Services') {
            steps {
                sh "kubectl --kubeconfig=$KUBECONFIG get svc -n $NAMES_SPACE $NAME_DEPLOY"  // Get the LoadBalancer IP of the nginx-deployment service. Please change the load balancer services name
            }
        }
    }
    
    post {
        success {
            echo 'Deployment to Kubernetes development cluster successful!'
        }
        failure {
            echo 'Deployment failed! haha'
        }
    }
}
