//Jenkins scripts CI/CD by Amir@Mindef 2024 v2.01

pipeline {
    agent any

    environment {
        HARBOR_REGISTRY = 'bakul.mod.gov.my'  // Harbor registry URL
        HARBOR_PROJECT = 'testing-app'  // Harbor project where image will be pushed
        HARBOR_IMAGE = 'node-helloworld'
        TAG = 'v1.01'  // Tag for the Docker image
        NAME_DEPLOY = 'node-helloworld'
        PATH_YAML = "/home/jenkins/workspace/CICD-Node-Helloworld-Dev/deploy-dev/deploy_bakul.yaml"
        NAMES_SPACE = "dev-app-awam"  // Namespace for deployment in k8s
        IMAGE_NAME_HARBOR = "${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${HARBOR_IMAGE}"  // Full image name for Harbor
        KUBECONFIG = "/home/jenkins/agent/k8s-dev/k8s-dev.yaml"  // Path to your KUBECONFIG certs
        DOCKERFILE_LOCATION = './Dockerfile'    // Dockerfile in root location  './tot/lab-01/Dockerfile'
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: "https://github.com/amundead/test-repo.git"  // Clone your GitHub repo
            }
        }
        

        stage('Check Dockerfile Location') {
            steps {
                script {
                    // Check if the Dockerfile exists in the root location
                    if (fileExists(DOCKERFILE_LOCATION)) {
                        echo "Dockerfile found at ${DOCKERFILE_LOCATION}"
                    } else {
                        error "Dockerfile not found at ${DOCKERFILE_LOCATION}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image using docker.build with --no-cache option
                    docker.build("${IMAGE_NAME_HARBOR}:${TAG}", "--no-cache -f ${DOCKERFILE_LOCATION} .")
                }
            }
        }

        stage('Tag and Push Docker Image to Harbor') {
            steps {
                script {
                    // Use docker.withRegistry for secure login and push to Harbor
                    docker.withRegistry("https://${HARBOR_REGISTRY}", 'harbor-credentials-amir') {
                        docker.image("${IMAGE_NAME_HARBOR}:${TAG}").push()
                    }
                }
            }
        }

        stage('Check Files') {
            steps {
                sh 'ls -R'  // List all files in the workspace to verify the structure
            }
        }

        stage('Update Deployment YAML') {
            steps {
                // Replace the placeholder with the actual Docker image name
                sh "sed -i 's|{{DOCKER_IMAGE}}|$IMAGE_NAME_HARBOR:$TAG|g' ${PATH_YAML}"
                sh "sed -i 's|{{NAME_DEPLOY}}|$NAME_DEPLOY|g' ${PATH_YAML}"
                sh "sed -i 's|{{NAMES_SPACE}}|$NAMES_SPACE|g' ${PATH_YAML}"
            }
        }

        stage('Deploy Application') {
            steps {
                sh "kubectl --kubeconfig=$KUBECONFIG apply -f ${PATH_YAML}"  // Apply deployment.yaml from the deploy folder
            }
        }
        
        stage('Update or Restart Deployment in Kubernetes') {
            steps {
                script {
                    // Check if the deployment already exists in the Kubernetes namespace
                    def deploymentExists = sh(script: "kubectl --kubeconfig=$KUBECONFIG get deployment $NAME_DEPLOY --namespace=$NAMES_SPACE", returnStatus: true) == 0

                    if (deploymentExists) {
                        // If the deployment exists, trigger a rollout restart
                        echo "Deployment exists. Performing rollout restart..."
                        sh "kubectl --kubeconfig=$KUBECONFIG rollout restart deployment/$NAME_DEPLOY --namespace=$NAMES_SPACE"
                    } else {
                        // If the deployment does not exist, set the image
                        echo "Deployment does not exist. Setting image for the deployment..."
                        sh "kubectl --kubeconfig=$KUBECONFIG set image deployment/$NAME_DEPLOY $NAME_DEPLOY=$IMAGE_NAME_HARBOR:$TAG --namespace=$NAMES_SPACE"
                    }
                }
            }
        }

        stage('Show Deployment Services') {
            steps {
                sh "kubectl --kubeconfig=$KUBECONFIG get svc -n $NAMES_SPACE $NAME_DEPLOY-loadbalancer"  // Get the LoadBalancer IP of service.
            }
        }
    }
    
    post {
        success {
            echo 'Deployment to Kubernetes cluster successful!'
        }
        failure {
            echo 'Deployment failed! haha'
        }
    }
}
