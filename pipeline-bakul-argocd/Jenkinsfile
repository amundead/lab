pipeline {
    agent any

    environment {
        HARBOR_REGISTRY = 'bakul.mod.gov.my'
        DOCKERFILE_LOCATION = './Dockerfile'
        PATH_YAML = 'deploy-dev/argo_deploy.yaml'
        ARGOCD_SERVER = 'kargo.mod.gov.my'
    }

    parameters {
        choice(name: 'BUILD_OPTION', choices: ['Build and Push Image', 'Push Only'], description: 'Choose whether to build a new image or push only')
        string(name: 'BASE_IMAGE_NAME', defaultValue: '', description: 'Base image name (e.g., testing-app/node-helloworld)')
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'Tag for the image (e.g., v1.00)')
        string(name: 'APP_NAME', defaultValue: '', description: 'Name of the Argo CD application to sync')
        string(name: 'GIT_URL', defaultValue: '', description: 'Git repository URL e.g. , https://github.com/amundead/test-repo.git')
    }

    stages {
        stage('Checkout') {
            steps {
                git url: "${params.GIT_URL}", branch: 'main'
            }
        }

        stage('Process Image') {
            steps {
                script {
                    env.IMAGE_NAME_HARBOR = "${HARBOR_REGISTRY}/${params.BASE_IMAGE_NAME}:${params.IMAGE_TAG}"
                    
                    if (params.BUILD_OPTION == 'Build and Push Image') {
                        // Build and Push the image
                        sh "docker build --no-cache -t ${env.IMAGE_NAME_HARBOR} -f ${DOCKERFILE_LOCATION} ."
                        withCredentials([usernamePassword(credentialsId: 'harbor-credentials-amir', passwordVariable: 'HARBOR_PASSWORD', usernameVariable: 'HARBOR_USERNAME')]) {
                            sh 'echo $HARBOR_PASSWORD | docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin'
                            sh "docker push ${env.IMAGE_NAME_HARBOR}"
                        }
                    }
                }
            }
        }

        stage('Get Docker Digest') {
            steps {
                script {
                    // Retrieve the digest of the specified image from the registry
                    def DOCKER_DIGEST = sh(script: "docker inspect --format='{{index .RepoDigests 0}}' ${env.IMAGE_NAME_HARBOR} | cut -d '@' -f 2", returnStdout: true).trim()
                    echo "Docker Digest: ${DOCKER_DIGEST}"

                    // Update YAML file with the retrieved digest
                    sh "sed -i 's|image:.*|image: ${env.IMAGE_NAME_HARBOR}@${env.DOCKER_DIGEST}|g' ${PATH_YAML}"
                
                }
            }
        }

        stage('Commit YAML Changes') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-credentials-amir', passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME')]) {
                    sh 'git config user.name $GITHUB_USERNAME'
                    sh 'git config user.email "amundeadz@yahoo.com"'
                    sh "git add ${PATH_YAML}"
                    sh 'git commit -m "Update image digest in YAML file"'
                    sh "git push ${params.GIT_URL} HEAD:main"
                }
            }
        }

        stage('Trigger ArgoCD Sync') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'kargo-credentials', usernameVariable: 'ARGOCD_USERNAME', passwordVariable: 'ARGOCD_PASSWORD')]) {
                        def token = sh (
                            script: """curl -s -X POST -k -d '{"username":"${ARGOCD_USERNAME}", "password":"${ARGOCD_PASSWORD}"}' -H 'Content-Type: application/json' https://${ARGOCD_SERVER}/api/v1/session | jq -r .token""",
                            returnStdout: true
                        ).trim()

                        def appExists = sh (
                            script: """curl -s -X GET -k -H "Authorization: Bearer ${token}" https://${ARGOCD_SERVER}/api/v1/applications | jq -r '.items[] | select(.metadata.name == "${params.APP_NAME}")'""",
                            returnStdout: true
                        ).trim()

                        if (appExists) {
                            sh """
                            curl -s -X POST -k -H "Authorization: Bearer ${token}" -H "Content-Type: application/json" https://${ARGOCD_SERVER}/api/v1/applications/${params.APP_NAME}/sync
                            """
                        } else {
                            error("Application '${params.APP_NAME}' does not exist in Argo CD.")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed."
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
