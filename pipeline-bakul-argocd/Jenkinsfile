pipeline {
    agent any
    environment {
        HARBOR_REGISTRY = 'bakul.mod.gov.my'
        NAMES_SPACE = 'dev-app-awam'
        DOCKERFILE_LOCATION = './Dockerfile'
        PATH_YAML = 'deploy-dev/argo_deploy.yaml'
    }

    parameters {
        choice(name: 'ACTION', choices: ['Build Image', 'Push Image Only'], description: 'Choose whether to build a new image or push an existing one')
        string(name: 'BASE_IMAGE_NAME', description: 'Provide the base image name with tag (e.g., testing-app/node-helloworld:v1.03)')
        string(name: 'GIT_URL', description: 'Git repository URL for updating YAML')
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    IMAGE_NAME_HARBOR = "${HARBOR_REGISTRY}/${params.BASE_IMAGE_NAME}"
                }
            }
        }

        stage('Build and Push Image') {
            when {
                expression { params.ACTION == 'Build Image' }
            }
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t ${IMAGE_NAME_HARBOR} -f ${DOCKERFILE_LOCATION} ."
                    // Push the image to Harbor
                    sh "docker push ${IMAGE_NAME_HARBOR}"
                }
            }
        }

        stage('Get Docker Digest') {
            steps {
                script {
                    // Get the Docker image digest
                    DOCKER_DIGEST = sh(
                        script: "docker inspect --format='{{index .RepoDigests 0}}' ${IMAGE_NAME_HARBOR} | cut -d '@' -f 2",
                        returnStdout: true
                    ).trim()

                    // Update the image in YAML using sed
                    sh "sed -i 's|image:.*|image: ${IMAGE_NAME_HARBOR}@${DOCKER_DIGEST}|g' ${PATH_YAML}"
                }
            }
        }

        stage('Commit and Push Changes to Git') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-credentials-id', passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME')]) {
                    script {
                        // Commit changes to the Git repository
                        sh """
                        git config user.name "$GITHUB_USERNAME"
                        git config user.email "amundeadz@yahoo.com"
                        git remote set-url origin https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@${params.GIT_URL.replace('https://', '')}
                        git add ${PATH_YAML}
                        git commit -m "Update image in YAML to ${IMAGE_NAME_HARBOR}@${DOCKER_DIGEST}"
                        git push origin main
                        """
                    }
                }
            }
        }

        stage('ArgoCD Sync') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'argocd-credentials-id', usernameVariable: 'ARGOCD_USERNAME', passwordVariable: 'ARGOCD_PASSWORD')]) {
                    script {
                        // Obtain ArgoCD auth token
                        def token = sh(
                            script: """
                                curl -s -X POST -k -d '{ "username": "${ARGOCD_USERNAME}", "password": "${ARGOCD_PASSWORD}" }' -H 'Content-Type: application/json' https://kargo.mod.gov.my/api/v1/session | jq -r .token
                            """,
                            returnStdout: true
                        ).trim()

                        // Trigger ArgoCD sync
                        sh """
                            curl -s -X POST -k -H "Authorization: Bearer ${token}" -H "Content-Type: application/json" https://kargo.mod.gov.my/api/v1/applications/node-helloworld/sync
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
