pipeline {
    agent any
    environment {
        HARBOR_REGISTRY = 'bakul.mod.gov.my'
        DOCKERFILE_LOCATION = './Dockerfile'
        PATH_YAML = 'deploy-dev/argo_deploy.yaml'
        GIT_URL = 'https://github.com/amundead/test-repo.git' // Define the Git URL here
    }
    parameters {
        string(name: 'IMAGE_NAME_TAG', defaultValue: '', description: 'Full image name with tag (e.g., bakul.mod.gov.my/testing-app/node-helloworld:v1.01)')
        string(name: 'BASE_IMAGE_NAME', defaultValue: 'testing-app/node-helloworld', description: 'Base image name (e.g., testing-app/node-helloworld)')
        string(name: 'APP_NAME', defaultValue: 'your-app-name', description: 'ArgoCD application name')
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout the source code from the GitHub repository using the environment variable
                git url: "${GIT_URL}", branch: 'main'
            }
        }

        stage('Build Image') {
            steps {
                script {
                    // Build the Docker image and tag it using user input for the base image name
                    def imageName = "${HARBOR_REGISTRY}/${params.BASE_IMAGE_NAME}:${env.BUILD_ID}"
                    sh "docker build -t ${imageName} -f ${DOCKERFILE_LOCATION} ."
                    env.IMAGE_NAME_HARBOR = imageName // Save the image name for later use
                }
            }
        }

        stage('Push Docker Image to Harbor') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'harbor-credentials-amir', passwordVariable: 'HARBOR_PASSWORD', usernameVariable: 'HARBOR_USERNAME')]) {
                        // Log in to Harbor
                        sh 'echo $HARBOR_PASSWORD | docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin'
                        // Push Docker image to Harbor
                        sh "docker push ${env.IMAGE_NAME_HARBOR}"
                    }
                }
            }
        }

        stage('Get Docker Digest') {
            steps {
                script {
                    // Get the image digest
                    def DOCKER_DIGEST = sh(script: "docker inspect --format='{{index .RepoDigests 0}}' ${env.IMAGE_NAME_HARBOR} | cut -d '@' -f 2", returnStdout: true).trim()
                    echo "Docker Digest: ${DOCKER_DIGEST}"

                    // Replace image in the ArgoCD deployment YAML using sed with the provided format
                    sh "sed -i 's|image:.*|image: ${env.IMAGE_NAME_HARBOR}@${DOCKER_DIGEST}|g' ${PATH_YAML}"
                }
            }
        }

        stage('Trigger ArgoCD Sync') {
            steps {
                script {
                    // Use withCredentials to access ArgoCD username and password
                    withCredentials([usernamePassword(credentialsId: 'argocd-credentials', usernameVariable: 'ARGOCD_USERNAME', passwordVariable: 'ARGOCD_PASSWORD')]) {
                        // Log in to ArgoCD
                        sh """
                        argocd login ${ARGOCD_SERVER} --username ${ARGOCD_USERNAME} --password ${ARGOCD_PASSWORD} --insecure
                        """
                        // Sync the application using user input for APP_NAME
                        sh """
                        argocd app sync ${params.APP_NAME}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Logout from ArgoCD (optional)
            sh "argocd logout ${ARGOCD_SERVER}"
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
