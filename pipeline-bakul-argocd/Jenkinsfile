// Pipeline script Jenkins to ArgoCD to K8S CI/CD by Amir@Mindef v2.01
pipeline {
    agent {
        label 'docker-jenkins-agent'
    }
    environment {
        HARBOR_REGISTRY = 'bakul.mod.gov.my'  // Harbor registry URL
        HARBOR_PROJECT = 'testing-app/node-helloworld:v1.01'  // Harbor project where image will be pushed
        IMAGE_NAME_HARBOR = "${HARBOR_REGISTRY}/${HARBOR_PROJECT}"  // Full image name for Harbor
        NAMES_SPACE = "dev-app-awam"  // Namespace for deployment in k8s
        DOCKERFILE_LOCATION = './tot/lab-01/Dockerfile'  // Dockerfile location
        PATH_YAML = 'deploy/argo_deploy.yaml'
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: "https://github.com/amundead/test-repo.git"
            }
        }

        stage('Check Dockerfile Location') {
            steps {
                script {
                    // Check if the Dockerfile exists in the root location
                    if (fileExists(DOCKERFILE_LOCATION)) {
                        echo "Dockerfile found at ${DOCKERFILE_LOCATION}"
                    } else {
                        error "Dockerfile not found at ${DOCKERFILE_LOCATION}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build --no-cache -t $IMAGE_NAME_HARBOR -f $DOCKERFILE_LOCATION .'  // Build Docker image without using cache
            }
        }
          
        stage('Push Docker Image to Harbor') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'harbor-credentials-amir', passwordVariable: 'HARBOR_PASSWORD', usernameVariable: 'HARBOR_USERNAME')]) {
                        sh 'echo $HARBOR_PASSWORD | docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin'
                        sh 'docker push $IMAGE_NAME_HARBOR'  // Push Docker image to Harbor
                    }
                }
            }
        }

        stage('Get Docker Digest') {
            steps {
                script {
                    // Get the image digest
                    DOCKER_DIGEST = sh(script: "docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_NAME_HARBOR | cut -d '@' -f 2", returnStdout: true).trim()
                    echo "Docker Digest: ${DOCKER_DIGEST}"
                }
            }
        }

        stage('Update Kubernetes Manifest') {
            steps {
                script {
                    // Replace the namespace and image in deployment.yaml
                    sh """
                    sed -i 's|image:.*|image: '"$IMAGE_NAME_HARBOR"'@'"$DOCKER_DIGEST"'|g' "$PATH_YAML"
                    sed -i 's|namespace:.*|namespace: ${NAMES_SPACE}|g' "$PATH_YAML"
                    """

                    // List the directory to verify the changes
                    sh 'ls -R'

                    // Commit and push changes to Git
                    dir("${dirname(PATH_YAML)}") {
                        withCredentials([usernamePassword(credentialsId: 'github-credentials-id', passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME')]) {
                            
                            sh 'git config user.name "$GITHUB_USERNAME"'
                            sh 'git config user.email "${GITHUB_USERNAME}@yahoo.com"'
                            
                            def changes = sh(script: "git diff --name-only", returnStdout: true).trim()
                            if (changes) {
                                sh 'git add $(basename '"$PATH_YAML"')'
                                sh 'git commit -m "Update image to $IMAGE_NAME_HARBOR@$DOCKER_DIGEST"'
                                sh 'git push https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/amundead/test-repo.git HEAD:main'
                            } else {
                                echo "No changes detected, skipping commit."
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment to the Kubernetes cluster via ArgoCD was successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
