pipeline {
    agent any
    
    environment {
        HARBOR_REGISTRY = 'bakul.mod.gov.my'
        DOCKERFILE_LOCATION = './Dockerfile'
        PATH_YAML = 'deploy-dev/argo_deploy.yaml'
        GIT_URL = 'https://github.com/amundead/test-repo.git'
        ARGOCD_SERVER = 'kargo.mod.gov.my' // Set the Argo CD server here
    }
    
    parameters {
        string(name: 'IMAGE_NAME_TAG', defaultValue: '', description: 'Full image name with tag (e.g., bakul.mod.gov.my/testing-app/node-helloworld:v1.01)')
        string(name: 'BASE_IMAGE_NAME', defaultValue: 'testing-app/node-helloworld', description: 'Base image name (e.g., testing-app/node-helloworld)')
        string(name: 'APP_NAME', defaultValue: '', description: 'Name of the Argo CD application to sync')
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout the source code from the GitHub repository using the environment variable
                git url: "${GIT_URL}", branch: 'main'
            }
        }

        stage('Build Image') {
            steps {
                script {
                    // Build the Docker image and tag it using user input for the base image name
                    def imageName = "${HARBOR_REGISTRY}/${params.BASE_IMAGE_NAME}:${env.BUILD_ID}"
                    sh "docker build -t ${imageName} -f ${DOCKERFILE_LOCATION} ."
                    env.IMAGE_NAME_HARBOR = imageName // Save the image name for later use
                }
            }
        }

        stage('Push Docker Image to Harbor') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'harbor-credentials-amir', passwordVariable: 'HARBOR_PASSWORD', usernameVariable: 'HARBOR_USERNAME')]) {
                        // Log in to Harbor
                        sh 'echo $HARBOR_PASSWORD | docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin'
                        // Push Docker image to Harbor
                        sh "docker push ${env.IMAGE_NAME_HARBOR}"
                    }
                }
            }
        }

        stage('Get Docker Digest') {
            steps {
                script {
                    // Get the image digest
                    def DOCKER_DIGEST = sh(script: "docker inspect --format='{{index .RepoDigests 0}}' ${env.IMAGE_NAME_HARBOR} | cut -d '@' -f 2", returnStdout: true).trim()
                    echo "Docker Digest: ${DOCKER_DIGEST}"

                    // Replace image in the ArgoCD deployment YAML using sed with the provided format
                    sh "sed -i 's|image:.*|image: ${env.IMAGE_NAME_HARBOR}@${DOCKER_DIGEST}|g' ${PATH_YAML}"
                }
            }
        }

        stage('Trigger ArgoCD Sync') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'kargo-credentials', usernameVariable: 'ARGOCD_USERNAME', passwordVariable: 'ARGOCD_PASSWORD')]) {
                        // Obtain an ArgoCD API token
                        def token = sh (
                            script: """curl -s -X POST -k -d '{"username":"${ARGOCD_USERNAME}", "password":"${ARGOCD_PASSWORD}"}' -H 'Content-Type: application/json' https://${ARGOCD_SERVER}/api/v1/session | jq -r .token""",
                            returnStdout: true
                        ).trim()

                        // Validate if the application exists
                        def appExists = sh (
                            script: """curl -s -X GET -k -H "Authorization: Bearer ${token}" https://${ARGOCD_SERVER}/api/v1/applications | jq -r '.items[] | select(.metadata.name == "${params.APP_NAME}")'""",
                            returnStdout: true
                        ).trim()

                        if (appExists) {
                            // Sync the application using the token and user input for APP_NAME
                            sh """
                            curl -s -X POST -k -H "Authorization: Bearer ${token}" https://${ARGOCD_SERVER}/api/v1/applications/${params.APP_NAME}/sync
                            """
                        } else {
                            error("Application '${params.APP_NAME}' does not exist in Argo CD. Please check the application name.")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed."
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
