pipeline {
    agent any
    
    environment {
        HARBOR_REGISTRY = 'bakul.mod.gov.my'
        DOCKERFILE_LOCATION = './Dockerfile'
        PATH_YAML = 'deploy-dev/argo_deploy.yaml'
        GIT_URL = 'https://github.com/amundead/test-repo.git'
        ARGOCD_SERVER = 'kargo.mod.gov.my' // Argo CD server URL
    }
    
    parameters {
        string(name: 'BASE_IMAGE_NAME', defaultValue: 'testing-app/node-helloworld:v1.00', description: 'Full image name with tag (e.g., testing-app/node-helloworld:v1.00)')
        string(name: 'APP_NAME', defaultValue: '', description: 'Name of the Argo CD application to sync')
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout source code from GitHub repository
                git url: "${GIT_URL}", branch: 'main'
            }
        }

        stage('Build Image') {
            steps {
                script {
                    // Use the full image name with tag from BASE_IMAGE_NAME
                    def imageName = "${HARBOR_REGISTRY}/${params.BASE_IMAGE_NAME}"
                    sh "docker build -t ${imageName} -f ${DOCKERFILE_LOCATION} ."
                    env.IMAGE_NAME_HARBOR = imageName // Save the image name for later use
                }
            }
        }

        stage('Push Docker Image to Harbor') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'harbor-credentials-amir', passwordVariable: 'HARBOR_PASSWORD', usernameVariable: 'HARBOR_USERNAME')]) {
                        // Log in to Harbor and push the Docker image
                        sh 'echo $HARBOR_PASSWORD | docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin'
                        sh "docker push ${env.IMAGE_NAME_HARBOR}"
                    }
                }
            }
        }

        stage('Get Docker Digest') {
            steps {
                script {
                    // Retrieve the image digest
                    def DOCKER_DIGEST = sh(script: "docker inspect --format='{{index .RepoDigests 0}}' ${env.IMAGE_NAME_HARBOR} | cut -d '@' -f 2", returnStdout: true).trim()
                    echo "Docker Digest: ${DOCKER_DIGEST}"

                    // Update the ArgoCD YAML file with the image and digest
                    sh "sed -i 's|image:.*|image: ${env.IMAGE_NAME_HARBOR}@${DOCKER_DIGEST}|g' ${PATH_YAML}"
                }
            }
        }

        stage('Trigger ArgoCD Sync') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'kargo-credentials', usernameVariable: 'ARGOCD_USERNAME', passwordVariable: 'ARGOCD_PASSWORD')]) {
                        // Attempt to retrieve Argo CD API token securely
                        def tokenResponse = sh(script: """
                            curl -s -X POST -k -d '{"username":"${ARGOCD_USERNAME}", "password":"${ARGOCD_PASSWORD}"}' -H 'Content-Type: application/json' https://${ARGOCD_SERVER}/api/v1/session
                        """, returnStdout: true).trim()

                        // Check if tokenResponse contains the token
                        def token = sh(script: "echo '${tokenResponse}' | jq -r .token", returnStdout: true).trim()

                        if (token) {
                            // Token retrieved successfully, proceed with app check and sync
                            echo "Token retrieved: ${token}"
                            
                            // Check if application exists
                            def appExists = sh(
                                script: """curl -s -X GET -k -H "Authorization: Bearer ${token}" https://${ARGOCD_SERVER}/api/v1/applications | jq -r '.items[] | select(.metadata.name == "${params.APP_NAME}")'""",
                                returnStdout: true
                            ).trim()

                            if (appExists) {
                                // Sync the application
                                sh """
                                curl -s -X POST -k -H "Authorization: Bearer ${token}" https://${ARGOCD_SERVER}/api/v1/applications/${params.APP_NAME}/sync
                                """
                            } else {
                                error("Application '${params.APP_NAME}' does not exist in Argo CD. Please check the application name.")
                            }
                        } else {
                            error("Failed to retrieve token from ArgoCD. Please check your credentials.")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed."
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
