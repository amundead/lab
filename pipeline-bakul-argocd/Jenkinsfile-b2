pipeline {
    agent any

    environment {
        HARBOR_REGISTRY = 'bakul.mod.gov.my'
        DOCKERFILE_LOCATION = './Dockerfile'
        PATH_YAML = 'deploy-dev/argo_deploy.yaml'
        ARGOCD_SERVER = 'kargo.mod.gov.my'
    }

    parameters {
        choice(name: 'ACTION', choices: ['Build and Push', 'Push Only'], description: 'Choose to build a new image or push an existing one')
        string(name: 'BASE_IMAGE_NAME', defaultValue: 'testing-app/node-helloworld', description: 'Base image name (e.g., testing-app/node-helloworld)')
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Image tag (e.g., v1.01)')
        string(name: 'IMAGE_DIGEST', defaultValue: '', description: 'Image digest (optional, used only if Push Only is selected)')
        string(name: 'APP_NAME', defaultValue: '', description: 'Name of the Argo CD application to sync')
        string(name: 'GIT_URL', defaultValue: 'https://github.com/amundead/test-repo.git', description: 'GitHub repository URL')
    }

    stages {
        stage('Checkout') {
            steps {
                git url: "${params.GIT_URL}", branch: 'main'
            }
        }

        stage('Build and Push Docker Image') {
            when {
                expression { params.ACTION == 'Build and Push' }
            }
            steps {
                script {
                    def imageName = "${HARBOR_REGISTRY}/${params.BASE_IMAGE_NAME}:${params.IMAGE_TAG}"
                    sh "docker build -t ${imageName} -f ${DOCKERFILE_LOCATION} ."
                    env.IMAGE_NAME_HARBOR = imageName // Save the image name for later use

                    withCredentials([usernamePassword(credentialsId: 'harbor-credentials-amir', passwordVariable: 'HARBOR_PASSWORD', usernameVariable: 'HARBOR_USERNAME')]) {
                        sh 'echo $HARBOR_PASSWORD | docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin'
                        sh "docker push ${env.IMAGE_NAME_HARBOR}"
                    }
                }
            }
        }

        stage('Push Only') {
            when {
                expression { params.ACTION == 'Push Only' }
            }
            steps {
                script {
                    def imageRef
                    if (params.IMAGE_DIGEST) {
                        imageRef = "${HARBOR_REGISTRY}/${params.BASE_IMAGE_NAME}@${params.IMAGE_DIGEST}"
                    } else {
                        imageRef = "${HARBOR_REGISTRY}/${params.BASE_IMAGE_NAME}:${params.IMAGE_TAG}"
                    }
                    env.IMAGE_NAME_HARBOR = imageRef // Save for later use

                    withCredentials([usernamePassword(credentialsId: 'harbor-credentials-amir', passwordVariable: 'HARBOR_PASSWORD', usernameVariable: 'HARBOR_USERNAME')]) {
                        sh 'echo $HARBOR_PASSWORD | docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin'
                        sh "docker pull ${env.IMAGE_NAME_HARBOR}" // Pull the specified image to ensure it's available
                        sh "docker push ${env.IMAGE_NAME_HARBOR}" // Re-push to registry
                    }
                }
            }
        }

        stage('Get Docker Digest and Update YAML') {
            steps {
                script {
                    def DOCKER_DIGEST = sh(script: "docker inspect --format='{{index .RepoDigests 0}}' ${env.IMAGE_NAME_HARBOR} | cut -d '@' -f 2", returnStdout: true).trim()
                    echo "Docker Digest: ${DOCKER_DIGEST}"

                    sh "sed -i 's|image:.*|image: ${env.IMAGE_NAME_HARBOR}@${DOCKER_DIGEST}|g' ${PATH_YAML}"

                    withCredentials([usernamePassword(credentialsId: 'github-credentials-id', passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME')]) {
                        sh """
                        git config user.name "Jenkins"
                        git config user.email "jenkins@example.com"
                        git remote set-url origin https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@${params.GIT_URL.replace('https://', '')}
                        git add ${PATH_YAML}
                        git commit -m "Update image in YAML to ${env.IMAGE_NAME_HARBOR}@${DOCKER_DIGEST}"
                        git push origin main
                        """
                    }
                }
            }
        }

        stage('Trigger ArgoCD Sync') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'kargo-credentials', usernameVariable: 'ARGOCD_USERNAME', passwordVariable: 'ARGOCD_PASSWORD')]) {
                        def token = sh (
                            script: """curl -s -X POST -k -d '{"username":"${ARGOCD_USERNAME}", "password":"${ARGOCD_PASSWORD}"}' -H 'Content-Type: application/json' https://${ARGOCD_SERVER}/api/v1/session | jq -r .token""",
                            returnStdout: true
                        ).trim()

                        def appExists = sh (
                            script: """curl -s -X GET -k -H "Authorization: Bearer ${token}" https://${ARGOCD_SERVER}/api/v1/applications | jq -r '.items[] | select(.metadata.name == "${params.APP_NAME}")'""",
                            returnStdout: true
                        ).trim()

                        if (appExists) {
                            sh """
                            curl -s -X POST -k -H "Authorization: Bearer ${token}" -H "Content-Type: application/json" https://${ARGOCD_SERVER}/api/v1/applications/${params.APP_NAME}/sync
                            """
                        } else {
                            error("Application '${params.APP_NAME}' does not exist in Argo CD.")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed."
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
